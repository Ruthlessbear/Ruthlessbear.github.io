<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>游戏服务端方向学习调研</title>
      <link href="/2024/03/26/Lua/Network_investigate/"/>
      <url>/2024/03/26/Lua/Network_investigate/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​结束了几个月的“寒假”之后，又进入了新公司开启了下一段旅程。最近开始为今年的学习计划做打算。今年并没有像以前一样规划大量的时间精力去学习渲染，而打算认真地学习一下游戏开发当中服务端相关的一些知识。不知为何，回过头再看网络相关的内容，倍感亲切。因为初期对服务端的认知有限，于是决定着手调研，在有限的资料当中，选择一个比较适合目前的我着手的服务端框架，在此基础上深入学习。</p><h3 id="一-服务端核心要素"><a href="#一-服务端核心要素" class="headerlink" title="一.服务端核心要素"></a>一.服务端核心要素</h3><p>​内存架构：决定如何使用内存，防止内存泄漏，最大化利用服务器内存，增大承载量，降低延迟。</p><p>​调度架构：及CPU对于进程、线程、协程的调度方案，比如单线程、多线程架构…以及同步、异步等编程模型。</p><p>​通信模式：通信方式，有传输层的TCP&#x2F;UDP协议，表示层的定义协议，应用层的消息队列、事件分发、RPC远程调用等等。<span id="more"></span></p><h3 id="二-服务端模型"><a href="#二-服务端模型" class="headerlink" title="二.服务端模型"></a>二.服务端模型</h3><p>​分服模型：最经典的模型，一个游戏服务器就是单独的一个游戏世界。其中分为单进程服务器和多进程服务器。在容灾和扩容上会有复杂问题，比如当服务器内存当中存在数据，但是需要容灾或者扩容时，这时候需要对服务器内存中的数据做转存，处理就会变得耗时。</p><p>​全服分线模型：对于需要持久化的数据，存放在同一集群中，而不再和服务器绑定在一起，此时扩容即是新增服务器，容灾则是减去服务器，两种无状态操纵无疑提升了扩容与容灾能力。结合跳线，比如在一些存在游戏大厅、游戏房间需求的游戏当中，可以清晰的将大厅单独分为一个服务器，而其他房间则是另一个，通过跳线的方式切换，让单一服务器更加专注于处理部分性能要求较高的需求，比如创建房间时的全局广播和自动匹配功能。</p><p>​全服全线模型：本质上是个不同功能进程组合一起的分布式系统。</p><h3 id="三-提高开发效率的功能结构"><a href="#三-提高开发效率的功能结构" class="headerlink" title="三.提高开发效率的功能结构"></a>三.提高开发效率的功能结构</h3><p>​RPC：远程过程调用协议，通常来说，若使用自定义协议报做交互，至少需要写四种代码，请求包结构、应答包结构、数据包接收器、数据包发送器，在游戏开发中，无疑会变得更加繁杂。而RPC方式开发，使远程函数调用就如同本地函数调用一般，可以大大增加开发效率。</p><p>​数据处理：查资料过程中看到这么一条，通常来说，写入越不频繁的数据，其价值越高，比如等级、经验，而频繁写入的数据，相对来说可以接受一些丢失，比如HP、玩家位置。在这样的基础上，可以通过缓存策略，比如Redis做内存缓冲给一些数据提供更高效的读取。</p><p>​自动化部署：例如Doker这样的虚拟化平台，提高服务集群的管理，具体之后学习学习。</p><h3 id="四-服务端框架选择"><a href="#四-服务端框架选择" class="headerlink" title="四.服务端框架选择"></a>四.服务端框架选择</h3><p>​在网上能看到许多服务端框架，可以说十分多样，但最后发觉到，服务端区别于客户端的许多业务层需求，其更加追求的是深度、沉淀。不同的框架有不同的优势，许多公司都有着自身的服务端框架技术，所以相对的技术迭代和更新并没有那么的快，反而更加依赖过去的技术积累，所以从学习的角度应该从自己更加熟悉的语言和环境入手。以下是对一些服务端框架的列举。</p><p>​Pomelo：源自网易，是基于Node.js的高性能、分布式游戏框架，业务层使用TS。</p><p>​Skynet：底层使用C开发的框架，提供snlua服务模块，可以解析lua而实现业务层逻辑。</p><p>​Kbengine(Comblock)：底层框架C++开发，业务层逻辑使用python编写，同时动态语言也满足了热更需求。</p><p>​ASP.NET：微软的Web框架，前公司的服务端框架，通过WebSocket通信，原本以为其使用的是HTTP，后面查了下发现只是和HTTP是同一层应用层协议，但实际上还是有区别的。其是建立在TCP之上的双向通信协议，除了在握手的时候是通过HTTP传输的，之后则是以帧序列形式传输。可以满足对延时要求并不高的游戏服务端需求。</p><h3 id="五-总结"><a href="#五-总结" class="headerlink" title="五.总结"></a>五.总结</h3><p>​综上所述，本人最终选择了skynet框架，因为客户端开发的缘故，对于C#和lua相对更加熟悉，并且避免深入其他语言所带来的过大学习成本。skynet即满足了在各种游戏类型上服务端的需求，同时业务层逻辑使用lua脚本语言编写，更加动态。并且本人最近发现lua真是一门很美妙的语言，不妨通过这次服务端框架的学习，试着更加深入一些。</p><img src="https://bearblog-1324659404.cos.ap-shanghai.myqcloud.com/blogBlogEnding.png" alt="BlogEnding"/>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Investigate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lua中关于元表的浅谈和面向对象的实现</title>
      <link href="/2024/03/09/Lua/Lua_OPP/"/>
      <url>/2024/03/09/Lua/Lua_OPP/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​Lua在很早之前接触过，那时候还是在实习，然而当时并没有感受到Lua所带来的魅力。后续项目的热更框架都是基于C#，再加上HybridCLR的出现，让我一度忽视了这一门语言。最近回过头学习Lua，被其语言的简洁性和创造性给直呼给力，就像是一堆简洁的积木，可以搭出各种你想象的模样。</p><p>​使用Lua编写的过程中，遇到了一些元表和OOP相关的问题，于是有了本文。</p><h3 id="元表"><a href="#元表" class="headerlink" title="元表"></a>元表</h3><p>​在Lua初始化的时候，会将元表的元方法所对应的字符串，以枚举类型定义，赋值给global_State当中，并且会标记为不可回收，这些全局状态中的字符串，将会一直用得到。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">luaT_init</span> <span class="params">(lua_State *L)</span> </span>&#123;</span><br><span class="line">  <span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *<span class="type">const</span> luaT_eventname[] = &#123;  <span class="comment">/* ORDER TM */</span></span><br><span class="line">    <span class="string">&quot;__index&quot;</span>, <span class="string">&quot;__newindex&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__gc&quot;</span>, <span class="string">&quot;__mode&quot;</span>, <span class="string">&quot;__len&quot;</span>, <span class="string">&quot;__eq&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__add&quot;</span>, <span class="string">&quot;__sub&quot;</span>, <span class="string">&quot;__mul&quot;</span>, <span class="string">&quot;__mod&quot;</span>, <span class="string">&quot;__pow&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__div&quot;</span>, <span class="string">&quot;__idiv&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__band&quot;</span>, <span class="string">&quot;__bor&quot;</span>, <span class="string">&quot;__bxor&quot;</span>, <span class="string">&quot;__shl&quot;</span>, <span class="string">&quot;__shr&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__unm&quot;</span>, <span class="string">&quot;__bnot&quot;</span>, <span class="string">&quot;__lt&quot;</span>, <span class="string">&quot;__le&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__concat&quot;</span>, <span class="string">&quot;__call&quot;</span>, <span class="string">&quot;__close&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;TM_N; i++) &#123;</span><br><span class="line">    <span class="built_in">G</span>(L)-&gt;tmname[i] = <span class="built_in">luaS_new</span>(L, luaT_eventname[i]);</span><br><span class="line">    <span class="built_in">luaC_fix</span>(L, <span class="built_in">obj2gco</span>(<span class="built_in">G</span>(L)-&gt;tmname[i]));  <span class="comment">/* never collect these names */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​当Lua虚拟机从一张table中查询数据的时候，会调用到luaV_gettable函数，从中可以看到对元表__index元方法的调用逻辑：<span id="more"></span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">luaV_gettable</span> <span class="params">(lua_State *L, <span class="type">const</span> TValue *t, TValue *key, StkId val)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> loop;</span><br><span class="line">  <span class="keyword">for</span> (loop = <span class="number">0</span>; loop &lt; MAXTAGLOOP; loop++) &#123;</span><br><span class="line">    <span class="type">const</span> TValue *tm;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ttistable</span>(t)) &#123;  </span><br><span class="line">      Table *h = <span class="built_in">hvalue</span>(t);</span><br><span class="line">      <span class="type">const</span> TValue *res = <span class="built_in">luaH_get</span>(h, key);</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">ttisnil</span>(res) || (tm = <span class="built_in">fasttm</span>(L, h-&gt;metatable, TM_INDEX)) == <span class="literal">NULL</span>) &#123; </span><br><span class="line">        <span class="built_in">setobj2s</span>(L, val, res);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">ttisnil</span>(tm = <span class="built_in">luaT_gettmbyobj</span>(L, t, TM_INDEX)))</span><br><span class="line">      <span class="built_in">luaG_typeerror</span>(L, t, <span class="string">&quot;index&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ttisfunction</span>(tm)) &#123;</span><br><span class="line">      <span class="built_in">callTMres</span>(L, val, tm, t, key);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    t = tm;  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">luaG_runerror</span>(L, <span class="string">&quot;loop in gettable&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​1.首先当t为表时，去表内查找，如果获得了非空数据或者表的元表元方法__index为空时，直接返回查找结果。</p><p>​fasttm宏作用是从数据的元表当中查找相应的键返回值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> gfasttm(g,mt,e)  \</span></span><br><span class="line"><span class="meta">  (checknoTM(mt, e) ? NULL : luaT_gettm(mt, e, (g)-&gt;tmname[e]))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fasttm(l,mt,e)gfasttm(G(l), mt, e)</span></span><br></pre></td></tr></table></figure><p>​这里可以看到两个十分相似的宏，fasttm和gfasttm，两者的差异在于所使用的指针不同，他们都是通过luaT_gettm函数实现主要功能。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> TValue *<span class="title">luaT_gettm</span> <span class="params">(Table *events, TMS event, TString *ename)</span> </span>&#123;</span><br><span class="line">  <span class="type">const</span> TValue *tm = <span class="built_in">luaH_Hgetshortstr</span>(events, ename);</span><br><span class="line">  <span class="built_in">lua_assert</span>(event &lt;= TM_EQ);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">notm</span>(tm)) &#123;  <span class="comment">/* no tag method? */</span></span><br><span class="line">    events-&gt;flags |= <span class="built_in">cast_byte</span>(<span class="number">1u</span>&lt;&lt;event);  <span class="comment">/* cache this fact */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> tm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​该函数执行时，没有找到对应的值时，会对该位做置位操作，当下次再查找该值时，会根据位判断直接返回。</p><p>​2.回到一开始的luaV_gettable函数，继续看下去……当该查找对象不是表时，会使用luaT_gettmbyobj函数尝试获取其metatable[“__index”]，若返回为空则报错。而luaT_gettmbyobj函数实际上仅会去获取table和userdata两种数据类型的元表，而其他数据类型通常的获取结果是nil，无需关心。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> TValue *<span class="title">luaT_gettmbyobj</span> <span class="params">(lua_State *L, <span class="type">const</span> TValue *o, TMS event)</span> </span>&#123;</span><br><span class="line">  Table *mt;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="built_in">ttype</span>(o)) &#123;</span><br><span class="line">    <span class="keyword">case</span> LUA_TTABLE:</span><br><span class="line">      mt = <span class="built_in">hvalue</span>(o)-&gt;metatable;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> LUA_TUSERDATA:</span><br><span class="line">      mt = <span class="built_in">uvalue</span>(o)-&gt;metatable;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      mt = <span class="built_in">G</span>(L)-&gt;mt[<span class="built_in">ttype</span>(o)];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (mt ? <span class="built_in">luaH_Hgetshortstr</span>(mt, <span class="built_in">G</span>(L)-&gt;tmname[event]) : &amp;<span class="built_in">G</span>(L)-&gt;nilvalue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​3.此时的数据对象既不是一张表，也不是一个空值，判断其是否为函数，若是，则执行并返回。</p><p>​4.而当执行到”t &#x3D; tm”时，显然，需要开启下一个循环了，于是查找的表变成了元表，以此重复至结束。</p><p>​看完上述以后，对一开始学习时所了解到的查找规则，“先找表内，表内没有看是否有元表和__index元方法”，有了更深的理解，不错~</p><p>​那既然有luaV_gettable函数，那肯定就会有luaV_settable函数。前者所对应的元方法是__index，那后者自然是 _newindex。</p><p>​当赋值时无法查找到相应键值时，则会触发__newindex，所以重写元方法的索引规则时，也会影响到赋值规则。自己在使用lua编写简易的MVVM框架时，仅通过这两者的规则重写，就实现了数据的监听，感觉到了元方法的强大。</p><p>​其他的元方法就不逐个讨论了，目前个人对元表的理解，核心就是基于虚拟机调用规则，对查找和赋值规则重构，配合元表的绑定，可以发挥很多意想不到的作用，而下面要讨论的OOP，就是产物之一。</p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>​Lua中面向对象的实现，通过元表关联，调用时查找元表（父类）函数或属性，实现面向对象。而继承的实现，有两种方式，一种是按照元表关系查找，而另一种是直接将父类成员深拷贝给子类。</p><p>​下述是面向对象的简易实现方式，直接贴个代码：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ClassA = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassA.show</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassA:new</span><span class="params">(o)</span></span></span><br><span class="line">    o = o <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">    <span class="built_in">setmetatable</span>(o, <span class="built_in">self</span>)</span><br><span class="line">    <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> objA = ClassA:new()</span><br><span class="line">objA.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">---out---</span></span><br><span class="line"><span class="comment">---hello world</span></span><br></pre></td></tr></table></figure><p>​将父类成员深拷贝给子类，其实现可以参考下述代码，其提供了构造函数，以及在创建实例时会对类进行向上递归，执行构造函数。同时通过一张公共表存储了环境内的所有类，具体代码如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> _class = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">class</span><span class="params">(name, super)</span></span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">type</span> = &#123;&#125;</span><br><span class="line">    <span class="built_in">type</span>.name = name</span><br><span class="line">    <span class="built_in">type</span>.ctor = <span class="literal">nil</span></span><br><span class="line">    <span class="built_in">type</span>.super = super</span><br><span class="line">    <span class="built_in">type</span>.new = <span class="function"><span class="keyword">function</span> <span class="params">(...)</span></span></span><br><span class="line">        <span class="keyword">local</span> o = &#123;&#125;</span><br><span class="line">        <span class="keyword">local</span> <span class="built_in">create</span></span><br><span class="line">        <span class="built_in">create</span> = <span class="function"><span class="keyword">function</span><span class="params">(c, ...)</span></span></span><br><span class="line">            <span class="keyword">if</span> c.super ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">create</span>(c.super, ...)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">if</span> c.ctor <span class="keyword">then</span></span><br><span class="line">                c.ctor(o, ...)</span><br><span class="line">            <span class="keyword">end</span>  </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="built_in">create</span>(<span class="built_in">type</span>, ...)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">setmetatable</span>(o, &#123;<span class="built_in">__index</span> = _class[<span class="built_in">type</span>]&#125;)</span><br><span class="line">        <span class="keyword">return</span> o</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> envtable = &#123;&#125;</span><br><span class="line">    _class[<span class="built_in">type</span>] = envtable</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setmetatable</span>(<span class="built_in">type</span>, &#123;<span class="built_in">__newindex</span> = <span class="function"><span class="keyword">function</span> <span class="params">(t, k, v)</span></span></span><br><span class="line">        envtable[k] = v</span><br><span class="line">    <span class="keyword">end</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> super <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> super_env = _class[super]</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(super_env) <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> envtable[k] <span class="keyword">then</span></span><br><span class="line">                envtable[k] = v</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">type</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">---example---</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    ClassB = class(<span class="string">&quot;ClassB&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ClassB:show</span><span class="params">()</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;show ClassB instance!&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ClassB:hit</span><span class="params">()</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hit success&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> objB = ClassB:new()</span><br><span class="line">    objB:show()</span><br><span class="line"></span><br><span class="line">    ClassC = class(<span class="string">&quot;ClassC&quot;</span>, ClassB)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ClassC:show</span><span class="params">()</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;show sub ClassC instance!&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> objC = ClassC:new()</span><br><span class="line">    objC:show()</span><br><span class="line">    objC:hit()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">---out---</span></span><br><span class="line">show ClassB instance!</span><br><span class="line">show <span class="built_in">sub</span> ClassC instance!</span><br><span class="line">hit success</span><br></pre></td></tr></table></figure><img src="https://bearblog-1324659404.cos.ap-shanghai.myqcloud.com/blogBlogEnding.png" alt="BlogEnding"/>]]></content>
      
      
      <categories>
          
          <category> Programming Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lua </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
